@using picamerasserver.Components.Components.StatusTable
@using picamerasserver.Components.Components.StatusTable.Tooltip
@using picamerasserver.Database.Models
@using SysColor = System.Drawing.Color
<MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                   Disabled="_pictureRequestModel == null && Disabled">
    <TitleContent>
        @* <MudPaper Elevation="10" Class="d-inline-flex"> *@
        <MudStack Style="width: 100%">
            @if (!Finished)
            {
                <MudProgressLinear Color="Color.Tertiary" Value="@ProgressTaken"/>
                <MudProgressLinear Color="Color.Primary" Value="@ProgressSaved"/>
            }
            else
            {
                <MudProgressLinear Color="Color.Tertiary" Value="@ProgressSent"/>
            }

            <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex" AlignItems="AlignItems.Center">
                <MudText Style="min-width: 10em">
                    @(PictureRequestType switch
                    {
                        PictureRequestType.StandingSpread => "Stāv rokas izplestas",
                        PictureRequestType.StandingTogether => "Stāv rokas gar",
                        PictureRequestType.Sitting => "Sēž",
                        PictureRequestType.Mask => "Maska",
                        PictureRequestType.Other => "Cits",
                        _ => throw new ArgumentOutOfRangeException()
                    })
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large"
                           EndIcon="@Icons.Material.Outlined.PhotoCamera" OnClick="@TakePicture"
                           Disabled="Disabled || TakePicActive || (_pictureRequestModel != null && !_canTryAgain)">
                    Take picture
                </MudButton>
                @if (!Finished)
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Taken @TakenCount / @RequestCount
                        </MudText>
                        @if (TakenCount != 0 && TakenCount == @RequestCount)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Saved @SavedCount / @RequestCount
                        </MudText>
                        @if (SavedCount != 0 && SavedCount == @RequestCount)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Failed @FailedCount
                        </MudText>
                        @if (FailedCount == 0)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large"
                               EndIcon="@Icons.Material.Outlined.Refresh" OnClick="@TryAgain"
                               Disabled="Disabled || (_pictureRequestModel == null || _canTryAgain)">
                        Try again
                    </MudButton>
                }
                else
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Pictures @SavedCount / @RequestCount
                        </MudText>
                        @if (SavedCount != 0 && SavedCount == @RequestCount)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Sent @SentCount / @TakenCount
                        </MudText>
                        @if (SentCount != 0 && SentCount == @TakenCount)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudText>
                            Failed to send @FailedSendCount
                        </MudText>
                        @if (FailedSendCount == 0)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                     Size="Size.Large"/>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                     Size="Size.Large"/>
                        }
                    </MudStack>
                }
            </MudStack>
        </MudStack>
        @* </MudPaper> *@
    </TitleContent>
    <ChildContent>
        @if (!Finished)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large"
                       EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelTakePicture"
                       Disabled="!TakePicActive">
                Cancel
            </MudButton>
        }
        <StatusTable
            ColorTransform="@ColorTransform"
            TooltipTransform="@_tooltipTransform">
        </StatusTable>
    </ChildContent>
</MudExpansionPanel>

@code {
    private Func<string, RenderFragment?> _tooltipTransform = _ => null;

    private void UpdateTooltipTransform()
    {
        _tooltipTransform = cameraId =>
        {
            var item = _pictureRequestModel?.CameraPictures.FirstOrDefault(x => x.CameraId == cameraId);
            if (item == null)
                return null;

            return @<PictureRequestTooltip CameraPicture="item"/>;
        };
    }

    private SysColor ColorTransform(string cameraId)
    {
        var cameraPicture = _pictureRequestModel?.CameraPictures.FirstOrDefault(x => x.CameraId == cameraId);
        if (cameraPicture == null)
        {
            return SysColor.FromArgb(0x00, 0x00, 0x00);
        }

        return cameraPicture.CameraPictureStatus switch
        {
            CameraPictureStatus.Requested => SysColor.FromArgb(0x55, 0x55, 0x00),
            CameraPictureStatus.FailedToRequest => SysColor.FromArgb(0xFF, 0x00, 0x00),
            CameraPictureStatus.Taken => SysColor.FromArgb(0x00, 0x55, 0x55),
            CameraPictureStatus.SavedOnDevice => SysColor.FromArgb(0x00, 0x55, 0x00),
            CameraPictureStatus.Failed => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.PictureFailedToSave => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.PictureFailedToSchedule => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.PictureFailedToTake => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.RequestedSend => SysColor.FromArgb(0x55, 0x55, 0x00),
            CameraPictureStatus.FailedToRequestSend => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.FailureSend => SysColor.FromArgb(0x99, 0x00, 0x00),
            CameraPictureStatus.Success => SysColor.FromArgb(0x00, 0xFF, 0x00),
            CameraPictureStatus.Unknown => SysColor.FromArgb(0x00, 0x00, 0xFF),
            CameraPictureStatus.PictureFailedToRead => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.PictureFailedToSend => SysColor.FromArgb(0x55, 0x00, 0x00),
            CameraPictureStatus.Cancelled => SysColor.FromArgb(0xFF, 0x55, 0x00),
            CameraPictureStatus.CancelledSend => SysColor.FromArgb(0xFF, 0x55, 0x00),
            null => SysColor.FromArgb(0x00, 0x00, 0x00),
            _ => throw new ArgumentOutOfRangeException(),
        };
    }

}