@using System.Globalization
@using picamerasserver.Components.Components.StatusTable
@using picamerasserver.Components.Components.StatusTable.Tooltip
@using picamerasserver.pizerocamera
@using SysColor = System.Drawing.Color

<MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                   Disabled="PictureSet == null || !Alived || AliveCount == 0">
    <TitleContent>
        <MudStack Style="width: 100%">
            <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex"
                      AlignItems="AlignItems.Center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           Size="Size.Large"
                           EndIcon="@Icons.Material.Outlined.Alarm" OnClick="@RequestNtpSyncStep"
                           Disabled="PictureSet == null || PictureSet.IsDone || !Alived || AliveCount == 0 || AnyActive">
                    NTP Sync
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Large"
                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelNtp"
                           Disabled="!NtpActive">
                    Cancel
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error"
                           Size="Size.Large"
                           OnClick="@OverrideNtp"
                           Disabled="PictureSet == null || PictureSet.IsDone || !Alived || NtpSynced || AnyActive">
                    Override
                </MudButton>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>
                        Synced @NtpSyncedCount / @AliveCount
                    </MudText>
                    @if (PictureSet != null && NtpSynced && AliveCount > 0 && NtpSyncedCount == AliveCount)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                 Size="Size.Large"/>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                 Size="Size.Large"/>
                    }
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>
                        Indicator
                    </MudText>
                    @if (PictureSet != null && IndicatorNtped)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"
                                 Size="Size.Large"/>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"
                                 Size="Size.Large"/>
                    }
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>
                        <MudText Typo="Typo.h6">Offset</MudText>
                        Min @(MinOffset == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MinOffset)) ms
                        <br/>
                        Max @(MaxOffset == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MaxOffset)) ms
                    </MudText>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                    <MudText>
                        <MudText Typo="Typo.h6">Error</MudText>
                        Min @(MinError == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MinError)) ms
                        <br/>
                        Max @(MaxError == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MaxError)) ms
                    </MudText>
                </MudStack>
            </MudStack>
        </MudStack>
        @* </MudPaper> *@
    </TitleContent>
    <ChildContent>
        <StatusTable
            Elevation="5"
            ColorTransform="@ColorTransformNtp"
            TooltipTransform="@_tooltipTransformNtp">
        </StatusTable>
        <IndicatorStatus TooltipTransform="_indicatorTooltipTransform"
                         ColorTransform="@ColorTransformIndicator"/>
    </ChildContent>
</MudExpansionPanel>

@code {
    private Func<string, RenderFragment?> _tooltipTransformNtp = _ => null;
    private RenderFragment? _indicatorTooltipTransform = null;

    private void UpdateTooltipTransformNtp()
    {
        _tooltipTransformNtp = cameraId =>
        {
            var item = PiZeroCameraManager.PiZeroCameras[cameraId];

            return @<NtpRequestTooltip PiZeroCamera="item"/>;
        };
    }

    private void UpdateIndicatorTooltip()
    {
        var piZeroIndicator = PiZeroCameraManager.PiZeroIndicator;
        if (piZeroIndicator.NtpRequest == null)
        {
            _indicatorTooltipTransform = null;
        }
        else
        {
            _indicatorTooltipTransform = @<NtpRequestTooltip2 NtpRequest="piZeroIndicator.NtpRequest"
                                                             LastNtpErrorMillis="piZeroIndicator.LastNtpErrorMillis"
                                                             LastNtpOffsetMillis="piZeroIndicator.LastNtpOffsetMillis"
                                                             DeviceId="@PiZeroIndicator.Id"/>;
        }
    }

    private SysColor ColorTransformIndicator() => ColorTransformNtp(PiZeroIndicator.Id);
    
    private SysColor ColorTransformNtp(string id)
    {
        var ntpRequest = id == PiZeroIndicator.Id
            ? PiZeroCameraManager.PiZeroIndicator.NtpRequest
            : PiZeroCameraManager.PiZeroCameras[id].NtpRequest;

        var lastNtpErrorMillis = id == PiZeroIndicator.Id
            ? PiZeroCameraManager.PiZeroIndicator.LastNtpErrorMillis
            : PiZeroCameraManager.PiZeroCameras[id].LastNtpErrorMillis;

        return ntpRequest switch
        {
            null => SysColor.FromArgb(0x00, 0x00, 0x00),
            PiZeroNtpRequest.Cancelled => SysColor.FromArgb(0xFF, 0x55, 0x00),
            PiZeroNtpRequest.Failure.Failed => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseJson => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseRegex => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToRequest => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Requested => SysColor.FromArgb(0x55, 0x55, 0x00),
            PiZeroNtpRequest.Success => lastNtpErrorMillis < 10
                ? SysColor.FromArgb(0x00, 0xFF, 0x00)
                : SysColor.FromArgb(0xFF, 0xFF, 0x00),
            _ => throw new ArgumentOutOfRangeException(nameof(ntpRequest))
        };
    }

}