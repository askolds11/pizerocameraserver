@page "/ntp"
@using picamerasserver.Components.Components
@using picamerasserver.Components.Components.StatusTable
@using picamerasserver.Components.Components.StatusTable.Tooltip
@using picamerasserver.pizerocamera
@using SysColor = System.Drawing.Color;

<PageTitle>Ntp - PiCam</PageTitle>
<DefaultPage>
    <MudStack Style="width: 100%">
        <MudExpansionPanels Elevation="5" MultiExpansion>
            <MudExpansionPanel Expanded Gutters="false" Dense="true">
                <TitleContent>
                    <MudText Typo="Typo.h5">NTP Sync</MudText>
                </TitleContent>
                <ChildContent>
                    <StatusTable ColorTransform="@ColorTransformNtp" TooltipTransform="@_tooltipTransform"></StatusTable>
                    <IndicatorStatus TooltipTransform="null"
                                     ColorTransform="@ColorTransformIndicator"/>
                    <MudStack Row="true" Spacing="4" Class="pa-4" AlignItems="AlignItems.Center">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@RequestNtpSyncStep">
                            Big (step)
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="@RequestNtpSyncSlew">
                            Small (slew)
                        </MudButton>
                    </MudStack>
                    <MudStack Spacing="4" Class="pa-4" AlignItems="AlignItems.Start">
                        <MudText Typo="Typo.h6">Offset</MudText>
                        <MudText Typo="Typo.body2">Min @MinOffset ms/Max @MaxOffset ms</MudText>
                        <MudText Typo="Typo.h6">Error</MudText>
                        <MudText Typo="Typo.body2"> Min @MinError ms/Max @MaxError ms</MudText>
                    </MudStack>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudStack>
</DefaultPage>

@code {
    private Func<string, RenderFragment?> _tooltipTransform = _ => null;

    private void UpdateTooltipTransform()
    {
        _tooltipTransform = cameraId =>
        {
            var item = PiZeroCameraManager.PiZeroCameras[cameraId];

            return @<NtpRequestTooltip PiZeroCamera="item"/>;
        };
    }

    private SysColor ColorTransformIndicator() => ColorTransformNtp(PiZeroIndicator.Id);
    
    private SysColor ColorTransformNtp(string id)
    {
        var ntpRequest = id == PiZeroIndicator.Id
            ? PiZeroCameraManager.PiZeroIndicator.NtpRequest
            : PiZeroCameraManager.PiZeroCameras[id].NtpRequest;

        var lastNtpErrorMillis = id == PiZeroIndicator.Id
            ? PiZeroCameraManager.PiZeroIndicator.LastNtpErrorMillis
            : PiZeroCameraManager.PiZeroCameras[id].LastNtpErrorMillis;

        return ntpRequest switch
        {
            null => SysColor.FromArgb(0x00, 0x00, 0x00),
            PiZeroNtpRequest.Cancelled => SysColor.FromArgb(0xFF, 0x55, 0x00),
            PiZeroNtpRequest.Failure.Failed => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseJson => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseRegex => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToRequest => SysColor.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Requested => SysColor.FromArgb(0x55, 0x55, 0x00),
            PiZeroNtpRequest.Success => lastNtpErrorMillis < 10
                ? SysColor.FromArgb(0x00, 0xFF, 0x00)
                : SysColor.FromArgb(0xFF, 0xFF, 0x00),
            _ => throw new ArgumentOutOfRangeException(nameof(ntpRequest))
        };
    }
}