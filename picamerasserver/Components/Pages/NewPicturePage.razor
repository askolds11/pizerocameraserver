@page "/NewPicturePage/{uuid:guid?}"
@using System.Globalization
@using picamerasserver.Components.Components
@using picamerasserver.Database.Models
@using picamerasserver.pizerocamera
@using Color = System.Drawing.Color
@inject ISnackbar Snackbar

<PageTitle>New picture set - PiCam</PageTitle>
<DefaultPage>
    <MudStack Style="width: 100%" Class="pt-4 pb-4 mt-4 mb-20">
        <MudExpansionPanels Elevation="5" MultiExpansion>
            <MudStack Spacing="4">
                <MudExpansionPanel Expanded>
                    <TitleContent>
                        <MudText Typo="Typo.h5">Create new picture set</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudStack>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Class="d-flex">
                                <MudText Typo="Typo.h6">Name</MudText>
                                <MudTextField @bind-Value="Name" MaxLength="200" Label="Name" Variant="Variant.Outlined"
                                              Class="flex-1" TextUpdateSuppression="false" Immediate="true">
                                    Name
                                </MudTextField>
                                <MudSpacer/>
                                <MudSpacer/>
                            </MudStack>
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Add" OnClick="@CreatePictureSet"
                                           Disabled="_pictureSet != null || Name.Trim().Length == 0">
                                    Create
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Save" OnClick="@UpdatePictureSet"
                                           Disabled="_pictureSet == null || Name.Trim().Length == 0">
                                    Update
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
                @if (_pictureSet is not { IsDone: true })
                {
                    <MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                                       Disabled="_pictureSet == null || _pictureSet.IsDone">
                        <TitleContent>
                            @* <MudPaper Elevation="10" Class="d-inline-flex"> *@
                            <MudStack Style="width: 100%">
                                @* <MudProgressLinear Color="Color.Tertiary" Value="@ProgressTaken"/> *@
                                @* <MudProgressLinear Color="Color.Primary" Value="@ProgressSent"/> *@
                                <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex"
                                          AlignItems="AlignItems.Center">
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary"
                                               Size="Size.Large"
                                               EndIcon="@Icons.Material.Outlined.Blind" OnClick="@GetAlive"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || PingActive">
                                        Get alive
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error"
                                               Size="Size.Large"
                                               OnClick="@OverrideGetAlive"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || Alived || PingActive || AliveCount == 0">
                                        Override
                                    </MudButton>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Alive @AliveCount / @TotalCount
                                        </MudText>
                                        @if (_pictureSet != null && AliveCount == @TotalCount)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                     Size="Size.Large"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                     Size="Size.Large"/>
                                        }
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Indicator
                                        </MudText>
                                        @if (_pictureSet != null && IndicatorAlive)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                     Size="Size.Large"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                     Size="Size.Large"/>
                                        }
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Ping @PingedCount / @TotalCount
                                        </MudText>
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Status @StatusCount / @TotalCount
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                            @* </MudPaper> *@
                        </TitleContent>
                        <ChildContent>
                            <MudText Typo="Typo.h6" Class="px-4">Ping</MudText>
                            <StatusTable
                                Elevation="5"
                                ColorTransform="@ColorTransformPing"
                                TooltipTransform="@_tooltipTransformStatus">
                            </StatusTable>
                            <MudText Typo="Typo.h6" Class="px-4">Status</MudText>
                            <StatusTable
                                Elevation="5"
                                ColorTransform="@ColorTransformStatus"
                                TooltipTransform="@_tooltipTransformStatus">
                            </StatusTable>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                                       Disabled="_pictureSet == null || !Alived || AliveCount == 0">
                        <TitleContent>
                            @* <MudPaper Elevation="10" Class="d-inline-flex"> *@
                            <MudStack Style="width: 100%">
                                @* <MudProgressLinear Color="Color.Tertiary" Value="@ProgressTaken"/> *@
                                @* <MudProgressLinear Color="Color.Primary" Value="@ProgressSent"/> *@
                                <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex"
                                          AlignItems="AlignItems.Center">
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary"
                                               Size="Size.Large"
                                               EndIcon="@Icons.Material.Outlined.Alarm" OnClick="@RequestNtpSyncStep"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || !Alived || AliveCount == 0 || NtpActive">
                                        NTP Sync
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error"
                                               Size="Size.Large"
                                               OnClick="@OverrideNtp"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || NtpSynced || NtpActive">
                                        Override
                                    </MudButton>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Synced @NtpSyncedCount / @AliveCount
                                        </MudText>
                                        @if (_pictureSet != null && NtpSynced && AliveCount > 0 && NtpSyncedCount == AliveCount)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                     Size="Size.Large"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                     Size="Size.Large"/>
                                        }
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Indicator
                                        </MudText>
                                        @if (_pictureSet != null && IndicatorNtped)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                     Size="Size.Large"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                     Size="Size.Large"/>
                                        }
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            <MudText Typo="Typo.h6">Offset</MudText>
                                            Min @(MinOffset == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MinOffset)) ms
                                            <br/>
                                            Max @(MaxOffset == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MaxOffset)) ms
                                        </MudText>
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            <MudText Typo="Typo.h6">Error</MudText>
                                            Min @(MinError == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MinError)) ms
                                            <br/>
                                            Max @(MaxError == null ? "-------" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", MaxError)) ms
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                            @* </MudPaper> *@
                        </TitleContent>
                        <ChildContent>
                            <StatusTable
                                Elevation="5"
                                ColorTransform="@ColorTransformNtp"
                                TooltipTransform="@_tooltipTransformNtp">
                            </StatusTable>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                                       Disabled="_pictureSet == null || !Alived || !NtpSynced || AliveCount == 0">
                        <TitleContent>
                            @* <MudPaper Elevation="10" Class="d-inline-flex"> *@
                            <MudStack Style="width: 100%">
                                @* <MudProgressLinear Color="Color.Tertiary" Value="@ProgressTaken"/> *@
                                @* <MudProgressLinear Color="Color.Primary" Value="@ProgressSent"/> *@
                                <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex"
                                          AlignItems="AlignItems.Center">
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary"
                                               Size="Size.Large"
                                               EndIcon="@Icons.Material.Outlined.Alarm" OnClick="@RequestSync"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || !NtpSynced || AliveCount == 0 || SyncActive">
                                        Sync frames
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error"
                                               Size="Size.Large"
                                               OnClick="@OverrideSync"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || SyncedFrames || SyncActive">
                                        Override
                                    </MudButton>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            Synced @SyncedCount / @AliveCount
                                        </MudText>
                                        @if (_pictureSet != null && SyncedFrames && SyncedCount > 0 && SyncedCount == AliveCount)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                     Size="Size.Large"/>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                     Size="Size.Large"/>
                                        }
                                    </MudStack>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudText>
                                            <MudText Typo="Typo.h6">Time</MudText>
                                            @(TimeTillSync == null ? "OK" : string.Format(CultureInfo.CurrentCulture, "{0:N2}", TimeTillSync)) ms
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                            </MudStack>
                        </TitleContent>
                        <ChildContent>
                            <StatusTable
                                Elevation="5"
                                ColorTransform="@ColorTransformSync"
                                TooltipTransform="@_tooltipTransformSync">
                            </StatusTable>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Gutters="false" Dense="true" HideIcon="true" HeaderClass="pa-0"
                                       Disabled="_pictureSet == null || !Alived || !NtpSynced || AliveCount == 0">
                        <TitleContent>
                            @* <MudPaper Elevation="10" Class="d-inline-flex"> *@
                            <MudStack Style="width: 100%">
                                @* <MudProgressLinear Color="Color.Tertiary" Value="@ProgressTaken"/> *@
                                @* <MudProgressLinear Color="Color.Primary" Value="@ProgressSent"/> *@
                                <MudStack Row="true" Spacing="4" Class="pa-4 d-inline-flex"
                                          AlignItems="AlignItems.Center">
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary"
                                               Size="Size.Large"
                                               EndIcon="@Icons.Material.Outlined.Alarm" OnClick="@TestSignal"
                                               Disabled="_pictureSet == null || _pictureSet.IsDone || !NtpSynced || AliveCount == 0 || SyncActive">
                                        Test sound
                                    </MudButton>
                                </MudStack>
                            </MudStack>
                        </TitleContent>
                    </MudExpansionPanel>
                }
                <PictureTakeSet PictureRequestType="PictureRequestType.StandingSpread"
                                PictureRequestModel="PictureRequestStandingSpread"
                                PictureSetUId="_pictureSet?.Uuid"
                                Disabled="_pictureSet == null || _pictureSet.IsDone || !Alived || !NtpSynced || !SyncedFrames || AliveCount == 0 || PingActive || NtpActive"
                                Finished="_pictureSet is { IsDone: true}"/>
                <PictureTakeSet PictureRequestType="PictureRequestType.StandingTogether"
                                PictureRequestModel="PictureRequestStandingTogether"
                                PictureSetUId="_pictureSet?.Uuid"
                                Disabled="_pictureSet == null || _pictureSet.IsDone || !Alived || !NtpSynced || !SyncedFrames || AliveCount == 0 || PingActive || NtpActive"
                                Finished="_pictureSet is { IsDone: true}"/>
                <PictureTakeSet PictureRequestType="PictureRequestType.Sitting"
                                PictureRequestModel="PictureRequestSitting"
                                PictureSetUId="_pictureSet?.Uuid"
                                Disabled="_pictureSet == null || _pictureSet.IsDone || !Alived || !NtpSynced || !SyncedFrames || AliveCount == 0 || PingActive || NtpActive"
                                Finished="_pictureSet is { IsDone: true}"/>
                <MudExpansionPanel Expanded>
                    <TitleContent>
                        <MudText Typo="Typo.h5">Actions</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudStack>
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.FireTruck" OnClick="@FinishPictureSet"
                                           Disabled="_pictureSet == null || _pictureSet.IsDone">
                                    Finish
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Send" OnClick="@SendPictureSet"
                                           Disabled="_pictureSet is not { IsDone: true } || SendSetActive || AllSentCount == AllTotalCount">
                                    Send
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Download"
                                           Href="@($"downloadpictureset/{_pictureSet?.Uuid}")" Target="_blank"
                                           Disabled="_pictureSet is not { IsDone: true } || SendSetActive || AllTotalCount == 0 || AllSentCount != AllTotalCount">
                                    Download
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Upload" OnClick="@UploadSmb"
                                           Disabled="_pictureSet is not { IsDone: true } || SendSetActive || UploadActive || AllSentCount == 0 || AllUploadedCount == AllTotalCount">
                                    Upload
                                </MudButton>
                                @if (_pictureSet is { IsDone: true })
                                {
                                    <MudText>
                                        Sent @AllSentCount / @AllTotalCount
                                    </MudText>
                                    @if (AllSentCount > 0 && AllSentCount == AllTotalCount)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                 Size="Size.Large"/>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                 Size="Size.Large"/>
                                    }

                                    <MudText>
                                        Failed to send @AllSentFailedCount
                                    </MudText>
                                    @if (AllSentFailedCount == 0)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="MudBlazor.Color.Success"
                                                 Size="Size.Large"/>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Close" Color="MudBlazor.Color.Error"
                                                 Size="Size.Large"/>
                                    }

                                    <MudText>
                                        Uploaded @AllUploadedCount / @AllSentCount
                                    </MudText>
                                }
                            </MudStack>
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel>
                    <TitleContent>
                        <MudText Typo="Typo.h5">Cancel</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudStack>
                            <MudStack Row="true" AlignItems="AlignItems.Center">
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelPing">
                                    Cancel Ping
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelNtpSync">
                                    Cancel Ntp Sync
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelTakePic">
                                    Cancel Take Picture
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelSend">
                                    Cancel Send
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelUpload">
                                    Cancel Upload
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Error" Size="Size.Large"
                                           EndIcon="@Icons.Material.Outlined.Cancel" OnClick="@CancelSync">
                                    Cancel Sync
                                </MudButton>
                            </MudStack>
                        </MudStack>
                    </ChildContent>
                </MudExpansionPanel>
            </MudStack>
        </MudExpansionPanels>
    </MudStack>
</DefaultPage>

@code {

    private readonly Func<string, RenderFragment?> _tooltipTransformStatus = _ => null;

    private Func<string, RenderFragment?> _tooltipTransformNtp = _ => null;

    private Func<string, RenderFragment?> _tooltipTransformSync = _ => null;

    private void UpdateTooltipTransformNtp()
    {
        _tooltipTransformNtp = cameraId =>
        {
            var item = PiZeroCameraManager.PiZeroCameras[cameraId];

            return @<NtpRequestTooltip PiZeroCamera="item"/>;
        };
    }

    private void UpdateTooltipTransformSync()
    {
        _tooltipTransformSync = cameraId =>
        {
            var item = PiZeroCameraManager.PiZeroCameras[cameraId];

            return @<SyncRequestTooltip PiZeroCamera="item"/>;
        };
    }

    private Color ColorTransformPing(string cameraId)
    {
        return PiZeroCameraManager.PiZeroCameras[cameraId].Pingable switch
        {
            true => Color.FromArgb(0x00, 0xFF, 0x00),
            false => Color.FromArgb(0xFF, 0x00, 0x00),
            null => Color.FromArgb(0x00, 0x00, 0x00)
        };
    }

    private Color ColorTransformStatus(string id)
    {
        return PiZeroCameraManager.PiZeroCameras[id].Status switch
        {
            null => Color.FromArgb(0xFF, 0x00, 0x00),
            _ => Color.FromArgb(0x00, 0xFF, 0x00),
        };
    }

    private Color ColorTransformNtp(string id)
    {
        var piZeroCamera = PiZeroCameraManager.PiZeroCameras[id];
        return piZeroCamera.NtpRequest switch
        {
            null => Color.FromArgb(0x00, 0x00, 0x00),
            PiZeroNtpRequest.Cancelled _ => Color.FromArgb(0xFF, 0x55, 0x00),
            PiZeroNtpRequest.Failure.Failed _ => Color.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseJson _ => Color.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToParseRegex _ => Color.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Failure.FailedToRequest _ => Color.FromArgb(0xff, 0x00, 0x00),
            PiZeroNtpRequest.Requested _ => Color.FromArgb(0x55, 0x55, 0x00),
            PiZeroNtpRequest.Success _ => piZeroCamera.LastNtpErrorMillis < 10
                ? Color.FromArgb(0x00, 0xFF, 0x00)
                : Color.FromArgb(0xFF, 0xFF, 0x00),
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    private Color ColorTransformSync(string id)
    {
        var piZeroCamera = PiZeroCameraManager.PiZeroCameras[id];

        return piZeroCamera.SyncStatus switch
        {
            null => Color.FromArgb(0x00, 0x00, 0x00),
            SyncStatus.Cancelled _ => Color.FromArgb(0xFF, 0x55, 0x00),
            SyncStatus.Failure.Failed _ => Color.FromArgb(0xff, 0x00, 0x00),
            SyncStatus.Failure.FailedToRequest _ => Color.FromArgb(0xff, 0x00, 0x00),
            SyncStatus.Requested _ => Color.FromArgb(0x55, 0x55, 0x00),
            SyncStatus.Success success => success.SyncReady
                ? Color.FromArgb(0x00, 0xFF, 0x00)
                : Color.FromArgb(0xFF, 0xFF, 0x00),
            _ => throw new ArgumentOutOfRangeException()
        };
    }

}